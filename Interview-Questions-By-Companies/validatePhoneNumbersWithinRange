# Python program to check if the 
# number lies in given range 
from bisect import bisect_left as lower_bound 
  
# Function that answers every query 
def answerQueries(a: list, nums: dict, n, queries: list, q): 

    # container to store all range 
    v = list() 
    # hash the L and R 
    mpp = dict() 
  
    # Push the element to container 
    # and hash the L and R 
    for i in range(n): 
        v.append(a[i][0]) 
        mpp[a[i][0]] = 1
        v.append(a[i][1]) 
        mpp[a[i][1]] = 2
  
    # sort the elements in container 
    v.sort() 
    
    
    
    for i in range(q): 
        if queries[i] in nums:
            print("Yes")
        else:        
            # each query 
            num = queries[i] 
      
            # get the number same or greater than integer 
            ind = lower_bound(v, num) 
      
            # if it lies 
            if ind >= len(v):
                print("No")
            elif v[ind] == num: 
                print("Yes") 
            else: 
      
                # check if greater is hashed as 2 
                if mpp[v[ind]] == 2: 
                    print("Yes") 
      
                # check if greater is hashed as 1 
                else: 
                    print("No") 

def stringToRange(r):
        singleRange = r.split('-',1)
        lowerBound, upperBound = singleRange[0], singleRange[1]
        return [int(lowerBound), int(upperBound)]
        
        
# Driver Code 
if __name__ == "__main__": 

    nums = {}
    ranges = []
    a = '12345, 2000-2400, 3000-4000, 1-200'
    
    queries = [12345, 2000,3000, 5000, 0, 100] 
    q = len(queries) 
    
    for each in a.split(','):
        if each.isnumeric():
            nums[int(each)] = 0         
        elif '-' in each:
            ranges.append(stringToRange(each.strip())) 
    
    n = len(ranges)
    answerQueries(ranges, nums, n, queries, q) 
  
