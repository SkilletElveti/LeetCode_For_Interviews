Nth Highest Salary:

with cte as
(
  select rank() over (order by salary asc) as dr, salary, id
    from sandbox.amantri.testemp
)
select id,salary from cte where dr = 2;

 
The Trips table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the Users table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).
+----+-----------+-----------+---------+--------------------+----------+
| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|
+----+-----------+-----------+---------+--------------------+----------+
| 1  |     1     |    10     |    1    |     completed      |2013-10-01|
| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|
| 3  |     3     |    12     |    6    |     completed      |2013-10-01|
| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|
| 5  |     1     |    10     |    1    |     completed      |2013-10-02|
| 6  |     2     |    11     |    6    |     completed      |2013-10-02|
| 7  |     3     |    12     |    6    |     completed      |2013-10-02|
| 8  |     2     |    12     |    12   |     completed      |2013-10-03|
| 9  |     3     |    10     |    12   |     completed      |2013-10-03| 
| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|
+----+-----------+-----------+---------+--------------------+----------+

The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).
+----------+--------+--------+
| Users_Id | Banned |  Role  |
+----------+--------+--------+
|    1     |   No   | client |
|    2     |   Yes  | client |
|    3     |   No   | client |
|    4     |   No   | client |
|    10    |   No   | driver |
|    11    |   No   | driver |
|    12    |   No   | driver |
|    13    |   No   | driver |
+----------+--------+--------+

Write a query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests made by unbanned users by the total number of requests made by unbanned users.
For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.
+------------+-------------------+
|     Day    | Cancellation Rate |
+------------+-------------------+
| 2013-10-01 |       0.33        |
| 2013-10-02 |       0.00        |
| 2013-10-03 |       0.50        |
+------------+-------------------+



select Request_at as Day,
ROUND((count(IF (t.STATUS != 'completed', TRUE, null))/count(*)),2) as 'Cancellation Rate'
from Trips t
where t.Client_Id in (select Users_Id from Users where Banned = 'No')
and t.Driver_Id in (select Users_Id from Users where Banned = 'No')
and t.Request_at between '2013-10-01' and '2013-10-03'
group by t.Request_at;











Team Scores in Football Tournament:-

You would like to compute the scores of all teams after all matches. Points are awarded as follows:
A team receives three points if they win a match (Score strictly more goals than the opponent team).
A team receives one point if they draw a match (Same number of goals as the opponent team).
A team receives no points if they lose a match (Score less goals than the opponent team).
Write an SQL query that selects the team_id, team_name and num_points of each team in the tournament after all described matches. Result table should be ordered by num_points (decreasing order). In case of a tie, order the records by team_id (increasing order).
The query result format is in the following example:
Teams table:
+-----------+--------------+
| team_id   | team_name    |
+-----------+--------------+
| 10        | Leetcode FC  |
| 20        | NewYork FC   |
| 30        | Atlanta FC   |
| 40        | Chicago FC   |
| 50        | Toronto FC   |
+-----------+--------------+

Matches table:
+------------+--------------+---------------+-------------+--------------+
| match_id   | host_team    | guest_team    | host_goals  | guest_goals  |
+------------+--------------+---------------+-------------+--------------+
| 1          | 10           | 20            | 3           | 0            |
| 2          | 30           | 10            | 2           | 2            |
| 3          | 10           | 50            | 5           | 1            |
| 4          | 20           | 30            | 1           | 0            |
| 5          | 50           | 30            | 1           | 0            |
+------------+--------------+---------------+-------------+--------------+

Result table:
+------------+--------------+---------------+
| team_id    | team_name    | num_points    |
+------------+--------------+---------------+
| 10         | Leetcode FC  | 7             |
| 20         | NewYork FC   | 3             |
| 50         | Toronto FC   | 3             |
| 30         | Atlanta FC   | 1             |
| 40         | Chicago FC   | 0             |
+------------+--------------+---------------+

/*Declare a CTE with matching host and guest team*/
with tournament as (
select t.team_id,
        t.team_name,
     case when team_id = host_team and m.host_goals > m.guest_goals then 3
             when team_id = guest_team and m.guest_goals > m.host_goals then 3
             when m.host_goals = m.guest_goals then 1
              else 0 end num_points
from Teams t left join Matches m 
on t.Team_Id = m.host_team or t.Team_Id = m.guest_team)
select sum(num_points) as num_points, team_id, team_name from tournament
group by team_id, team_name


1270. All People Report to the Given Manager
Write an SQL query to find employee_id of all employees that directly or indirectly report their work to the head of the company.
The indirect relation between managers will not exceed 3 managers as the company is small.
Return result table in any order without duplicates.
The query result format is in the following example:
Employees table:
+-------------+---------------+------------+
| employee_id | employee_name | manager_id |
+-------------+---------------+------------+
| 1           | Boss          | 1          |
| 3           | Alice         | 3          |
| 2           | Bob           | 1          |
| 4           | Daniel        | 2          |
| 7           | Luis          | 4          |
| 8           | Jhon          | 3          |
| 9           | Angela        | 8          |
| 77          | Robert        | 1          |
+-------------+---------------+------------+

Result table:
+-------------+
| employee_id |
+-------------+
| 2           |
| 77          |
| 4           |
| 7           |
+-------------+

The head of the company is the employee with employee_id 1.
The employees with employee_id 2 and 77 report their work directly to the head of the company.
The employee with employee_id 4 report his work indirectly to the head of the company 4 --> 2 --> 1. 
The employee with employee_id 7 report his work indirectly to the head of the company 7 --> 4 --> 2 --> 1.
The employees with employee_id 3, 8 and 9 don't report their work to head of company directly or indirectly.


//going into second level to find out who are the managers for the employees we found in cte1. 
//Then we follow the same for cte3 were we find the employee id who are manager we found in cte2.
//First cte1 will give you only boss 2, 77 (direct reports) 
//cte2 will give you who are employee of manager - 2,77 and //they are 2,77,4 and then cte3 we have to find manager are //2,77,4 and those employee are 2,77,4,7

with
cte1 as (
select employee_id from employees
where manager_id = 1 and employee_id<>1),
cte2 as (
select e.employee_id from employees e, cte1
where manager_id = cte1.employee_id),
cte3 as (
select e.employee_id from employees e, cte2
where manager_id = cte2.employee_id)
select * from cte1
union 
select * from cte2
union 
select  * from cte3





Delete Duplicate Emails

Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.
+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
| 3  | john@example.com |
+----+------------------+
Id is the primary key column for this table.

For example, after running your query, the above Person table should have the following rows:
+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
+----+------------------+


delete p1 from Person p1, Person p2
where p1.Email = p2.Email and p1.Id > p2.Id



626. Exchange Seats

Mary wants to change seats for the adjacent students.
 
Can you write a SQL query to output the result for Mary?
 
+---------+---------+
|    id   | student |
+---------+---------+
|    1    | Abbot   |
|    2    | Doris   |
|    3    | Emerson |
|    4    | Green   |
|    5    | Jeames  |
+---------+---------+

For the sample input, the output is:
 
+---------+---------+
|    id   | student |
+---------+---------+
|    1    | Doris   |
|    2    | Abbot   |
|    3    | Green   |
|    4    | Emerson |
|    5    | Jeames  |
+---------+---------+

Algorithm
There are 3 cases

For students with even-numbered ids, subtract 1 from their id
For students with odd-numbered ids, add 1 to their id (Except if this odd-numbered student has the highest id in the class
For student with odd-numbered id who also has the highest id in the class, don't change the id.
MySQL Solution






SELECT
	  CASE
        WHEN id % 2 = 0 THEN id - 1
        WHEN id % 2 = 1 AND id != (SELECT COUNT(*) FROM seat) THEN id + 1
        ELSE id
    END as id,
	  student
FROM seat
ORDER BY id



597. Friend Requests I: Overall Acceptance Rate
https://leetcode.com/problems/friend-requests-i-overall-acceptance-rate/discuss/358575/Detailed-Explaination-for-Question-and-2-follow-up 

In social network like Facebook or Twitter, people send friend requests and accept others’ requests as well. Now given two tables as below:
 
Table: friend_request
| sender_id | send_to_id |request_date|
|-----------|------------|------------|
| 1         | 2          | 2016_06-01 |
| 1         | 3          | 2016_06-01 |
| 1         | 4          | 2016_06-01 |
| 2         | 3          | 2016_06-02 |
| 3         | 4          | 2016-06-09 |

 
Table: request_accepted
| requester_id | accepter_id |accept_date |
|--------------|-------------|------------|
| 1            | 2           | 2016_06-03 |
| 1            | 3           | 2016-06-08 |
| 2            | 3           | 2016-06-08 |
| 3            | 4           | 2016-06-09 |
| 3            | 4           | 2016-06-10 |

 
Write a query to find the overall acceptance rate of requests rounded to 2 decimals, which is the number of acceptance divide the number of requests.
 
For the sample data above, your query should return the following result.
 
|accept_rate|
|-----------|
|       0.80|

# Write your MySQL query statement below
#1
select round(ifnull(count(distinct requester_id, accepter_id)/count(distinct sender_id, send_to_id), 0), 2) as accept_rate
from request_accepted, friend_request

#2 write a query to return the accept rate but for every month?

select round(ifnull(c.acp/d.scp, 0), 2) as accept_rate, c.month from 
(select count(distinct requester_id, accepter_id) as acp, Month(accept_date) as month from request_accepted) c,
(select count(distinct sender_id, send_to_id) as scp, Month(request_date) as month from friend_request) d
where c.month = d.month
group by c.month


 602. Friend Requests II: Who Has the Most Friends
able request_accepted
+--------------+-------------+------------+
| requester_id | accepter_id | accept_date|
|--------------|-------------|------------|
| 1            | 2           | 2016_06-03 |
| 1            | 3           | 2016-06-08 |
| 2            | 3           | 2016-06-08 |
| 3            | 4           | 2016-06-09 |
+--------------+-------------+------------+
This table holds the data of friend acceptance, while requester_id and accepter_id both are the id of a person.

 
Write a query to find the the people who has most friends and the most friends number under the following rules:
It is guaranteed there is only 1 people having the most friends.
The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.
For the sample data above, the result is:
Result table:
+------+------+
| id   | num  |
|------|------|
| 3    | 3    |
+------+------+
The person with id '3' is a friend of people '1', '2' and '4', so he has 3 friends in total, which is the most number than any others.
/*In the below query since the accepter and the requester when they send the friend request both of them can be friends so in this case that count as one friend. Hence we take union of requester with accepter as id1 and different for id2. Finally in the outer query counting of both would give us the final result.*/
select id1 as id, count(*) as num
from(
    select requester_id as id1, accepter_id as id2 from         request_accepted
    union 
    select accepter_id as id1, requester_id as id2 from request_accepted
) a 
group by 1
order by count(*) desc
limit 1




/*Remove duplicate product and only print the non-duplicate one’s, asked in the HBO max*/

Select name,
	id,
	brand_name,
	date from 
(
Select id,
     row_number over (partition by name order by date desc)rn,
	brand_name,
	date,
	name
	from products
) dedup 
where dedup.rn = 1


/*Get the top 2nd or third or any highest selling product from the product table, asked in the HBO max*/

Select sum(qty), product_id
from products
group by product_id, date_part(‘month’, date)
having date_part(‘month’, date) = ‘01’
order by sum(qty) desc
limit 1
Offset 1 //here offset gives me the range.


/*Query to get the self join and know who reports to who. This give list of employees and there manager
https://www.zentut.com/sql-tutorial/sql-self-join/  */



SELECT
    e.name as employee,
    m.name as manager
FROM
    employees e
INNER JOIN
    employees m ON m.employeeid = e.reportsto;

------------------------------------------------------------------------------------------------------------

Given table families and countries. Find the family which will recieve discount. Family will get discount if the 
size of family memebers is greater then min size of the countries table.
------------------------------------------------------------------------------------------------------------



select a.ct
from
(select f.Id
,count(distinct c.id) as ct
from families f
cross join countries c
where f.family_size >= c.min_size
group by f.id
order by ct desc
) a
limit 1;




/*Get the cohort number from the list of the employee table. For example the 
*/

Employees who have joined during the same time in ascending order are the cohort.
//below will give you result for the second cohort
with cte as
(
  select name,start_date,
  dense_rank() over (order by start_date desc) as d_rank
  from sandbox.amantri.order_customer
)
select name,start_date from cte where d_rank = 2;


